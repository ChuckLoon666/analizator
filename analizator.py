import streamlit as st
import re
from collections import Counter
import pymorphy3

def analyze_texts(text1: str, text2: str) -> str:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞, –Ω–∞—Ö–æ–¥–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–µ–º–º—ã –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞,
    –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –ø–µ—Ä–≤–æ–º, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    """
    try:
        morph = pymorphy3.MorphAnalyzer()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑."

    # --- –®–ê–ì –û–ß–ò–°–¢–ö–ò –¢–ï–ö–°–¢–ê ---
    # 1. –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª
    text1_cleaned = re.sub(r'\s+', ' ', text1)
    text2_cleaned = re.sub(r'\s+', ' ', text2)
    # 2. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    def get_lemmas(text: str) -> list:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        words = re.findall(r'\b[–∞-—è–ê-–Ø—ë–Å-]+\b', text.lower())
        lemmas = [morph.parse(word)[0].normal_form for word in words]
        return lemmas

    lemmas1_set = set(get_lemmas(text1_cleaned))
    all_lemmas_from_text2 = get_lemmas(text2_cleaned)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ª–µ–º–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ 2, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ 1
    unique_lemmas = [lemma for lemma in all_lemmas_from_text2 if lemma not in lemmas1_set]

    if not unique_lemmas:
        return "–í–æ –≤—Ç–æ—Ä–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –ø–µ—Ä–≤–æ–º."

    # –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    frequency_counter = Counter(unique_lemmas)
    sorted_lemmas = sorted(frequency_counter.items(), key=lambda x: (-x[1], x[0]))
    
    result_markdown = [f"- **{word}** ‚Äî {count} —Ä–∞–∑(–∞)" for word, count in sorted_lemmas[:300]]

    return "\n".join(result_markdown)

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ")
st.info(
    "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–º —Ç–µ–∫—Å—Ç–µ, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ø–µ—Ä–≤–æ–º. "
    "–ê–Ω–∞–ª–∏–∑ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤ (–ø–∞–¥–µ–∂–∏, —á–∏—Å–ª–∞), –ø—Ä–∏–≤–æ–¥—è –∏—Ö –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ (–ª–µ–º–º–µ)."
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
if 'text1' not in st.session_state:
    st.session_state.text1 = ""
if 'text2' not in st.session_state:
    st.session_state.text2 = ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
def clear_text1():
    st.session_state.text1 = ""

def clear_text2():
    st.session_state.text2 = ""

col1, col2 = st.columns(2)

with col1:
    st.header("–¢–µ–∫—Å—Ç ‚Ññ1 (–û—Å–Ω–æ–≤–Ω–æ–π)")
    st.session_state.text1 = st.text_area(
        label="–°–ª–æ–≤–∞ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞:",
        value=st.session_state.text1,
        height=300,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç...",
        key="text_area1"
    )
    st.button("–û—á–∏—Å—Ç–∏—Ç—å", on_click=clear_text1, key="clear_text1")

with col2:
    st.header("–¢–µ–∫—Å—Ç ‚Ññ2 (–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º—ã–π)")
    st.session_state.text2 = st.text_area(
        label="–ó–¥–µ—Å—å –±—É–¥—É—Ç –∏—Å–∫–∞—Ç—å—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞:",
        value=st.session_state.text2,
        height=300,
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...",
        key="text_area2"
    )
    st.button("–û—á–∏—Å—Ç–∏—Ç—å", on_click=clear_text2, key="clear_text2")

if st.button("üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", use_container_width=True):
    if st.session_state.text1 and st.session_state.text2:
        with st.spinner("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤..."):
            analysis_result = analyze_texts(st.session_state.text1, st.session_state.text2)
        
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
        st.markdown("---")
        st.markdown(analysis_result)
    else:
        st.error("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç—ã –≤ –æ–±–∞ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–≤–µ—Ä—Ö" —Å –ø–æ–º–æ—â—å—é HTML –∏ JavaScript
st.markdown(
    """
    <style>
    .scroll-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }
    </style>
    <button class="scroll-to-top" onclick="window.scrollTo({top: 0, behavior: 'smooth'})">‚Üë –ù–∞–≤–µ—Ä—Ö</button>
    """,
    unsafe_allow_html=True
)